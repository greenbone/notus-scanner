# Copyright (C) 2021-2022 Greenbone Networks GmbH
#
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from unittest import TestCase

from notus.scanner.models.packages.package import (
    PackageAdvisory,
    AdvisoryReference,
)
from notus.scanner.models.packages.rpm import RPMPackage
from notus.scanner.models.vulnerability import (
    PackageVulnerabilities,
    Vulnerability,
)


class PackageVulnerabilityTestCase(TestCase):
    def test_constructor(self):
        host_ip = "123.456.789.10"
        host_name = "foo"
        oid = "1.2.3.4.5"

        package = RPMPackage.from_full_name(
            "foo-bar-1.2.3-4.x86_64",
        )

        fixed_package = RPMPackage.from_full_name(
            "foo-bar-1.2.4-4.x86_64",
        )

        pack_advisory = PackageAdvisory(
            fixed_package, AdvisoryReference(oid), ">=", lambda _: True
        )

        package_vulnerability = PackageVulnerabilities(
            host_ip=host_ip, host_name=host_name
        )
        package_vulnerability.add_vulnerability(
            oid,
            Vulnerability(package, pack_advisory),
        )

        self.assertEqual(package_vulnerability.host_ip, host_ip)
        self.assertEqual(package_vulnerability.host_name, host_name)

        v_oid, vul = next(iter(package_vulnerability.vulnerabilities.items()))
        self.assertEqual(v_oid, oid)

        package, advisory = vul[0].package, vul[0].advisory
        self.assertEqual(package.name, "foo-bar")
        self.assertEqual(package.version, "1.2.3")  # pylint: disable=no-member
        self.assertEqual(package.release, "4")  # pylint: disable=no-member
        self.assertEqual(package.full_name, "foo-bar-1.2.3-4.x86_64")

        self.assertEqual(advisory.package.name, "foo-bar")
        self.assertEqual(
            advisory.package.version, "1.2.4"  # pylint: disable=no-member
        )
        self.assertEqual(
            advisory.package.release, "4"  # pylint: disable=no-member
        )
        self.assertEqual(advisory.package.full_name, "foo-bar-1.2.4-4.x86_64")
        self.assertEqual(advisory.is_vulnerable(package), True)
        self.assertEqual(advisory.symbol, ">=")
        self.assertEqual(advisory.advisory.oid, oid)
